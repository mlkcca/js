{"version":3,"sources":["core/datastore.js"],"names":["root","path","_options","options","setDataType","datatype","cache","Error","event","cb","onComplete","_get_pubsub","subscribe","message","decode","unsubscribe","value","publish","err","id","apiUrl","_get_api_url","params","c","limit","order","ts","useCache","decoded_messages","query","_get_remote","get","then","result","messages","content","map","m","length","add","catch"],"mappings":"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","file":"datastore.js","sourcesContent":["import PushDataType from './datatypes/push'\nimport SendDataType from './datatypes/send'\nimport Cache from '../cache'\n\nexport default class {\n  constructor (root, path, _options) {\n    this.root = root\n    this.path = path\n    let options = _options || {}\n    this.setDataType(options.datatype || 'json')\n    this.cache = new Cache()\n  }\n\n  setDataType (datatype) {\n    if (datatype !== 'text' && datatype !== 'json' && datatype === 'binary') {\n      throw new Error('invalid datatype')\n    }\n    this.datatype = datatype\n  }\n\n  on (event, cb, onComplete) {\n    if (event === 'push') {\n      this.root._get_pubsub().subscribe(this.path, 'push', (message) => {\n        cb(PushDataType.decode(message, this.datatype))\n      }, onComplete)\n    } else if (event === 'set') {\n      this.root._get_pubsub().subscribe(this.path, 'set', (message) => {\n        cb(PushDataType.decode(message, this.datatype))\n      }, onComplete)\n    } else if (event === 'send') {\n      this.root._get_pubsub().subscribe(this.path, 'send', (message) => {\n        cb(SendDataType.decode(message, this.datatype))\n      }, onComplete)\n    }\n  }\n\n  off (event) {\n    // let op = '_p';\n    // if(event == 'push') op = '_p';\n    // else if(event == 'send') op = '_s';\n    this.root._get_pubsub().unsubscribe(this.path, event)\n  }\n\n  push (value, options, cb) {\n    if (typeof options === 'function') {\n      cb = options\n    } else if (typeof options === 'undefined') {\n      cb = function () {}\n    }\n    this.root._get_pubsub().publish(this.path, 'push', value, (err, message) => {\n      if (err) return cb(err)\n      cb(null, PushDataType.decode(message, this.datatype))\n    })\n  }\n\n  set (id, value, options, cb) {\n    if (typeof options === 'function') {\n      cb = options\n    } else if (typeof options === 'undefined') {\n      cb = function () {}\n    }\n    this.root._get_pubsub().publish(this.path, 'set', value, cb, {id: id})\n  }\n\n  send (value, cb) {\n    if (typeof cb === 'undefined') {\n      cb = function () {}\n    }\n    this.root._get_pubsub().publish(this.path, 'send', value, cb)\n  }\n\n  history (options, cb) {\n    let apiUrl = this.root._get_api_url('history')\n    let params = {\n      c: this.path\n    }\n    params.limit = options.limit || 100\n    params.order = options.order || 'desc'\n    if (options.ts) {\n      params.id = 'd'\n      params.ts = options.ts\n    }\n\n    if (options.useCache && options.ts && params.order === 'desc') {\n      let decoded_messages = this.cache.query(options.ts, params.limit)\n      if (decoded_messages) {\n        cb(null, decoded_messages)\n        return\n      }\n    }\n\n    this.root._get_remote().get(apiUrl, params).then((result) => {\n      if (result.err) {\n        cb(result.err)\n      } else {\n        let messages = result.content\n        let decoded_messages = messages.map((m) => PushDataType.decode(m, this.datatype))\n        if (options.useCache && options.ts && params.order === 'desc' && messages.length > 0) {\n          this.cache.add(options.ts, decoded_messages)\n        }\n        cb(null, decoded_messages)\n      }\n    }).catch(function (err) {\n      cb(err)\n    })\n  }\n}\n"]}