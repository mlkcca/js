{"version":3,"sources":["core/pubsub.js"],"names":["WebSocket","require","EventEmitter","SubscriberManager","subscribers","path","op","cb","topic","on","removeListener","message","emit","Object","keys","map","options","target","host","logger","subscriberMan","offlineQueue","messageStore","wsOptions","reconnectPeriod","reconnectTimer","pingTimer","pongArrived","state","event","params","result","getState","offline","connecting","online","disconnecting","console","error","currentState","nextState","log","_connect","warn","get","s","_subscribe","flushOfflineMessage","_setupPingTimer","_clean","_setupReconnect","code","_disconnect","sendEvent","v","JSON","stringify","send","p","_t","_o","onComplete","reg","unreg","client","utf8message","parse","hasOwnProperty","response","deliver","_handlePong","close","setTimeout","recvAck","e","_resetPingInterval","add","enq","clean","clear","keepalive","_checkPing","reschedule","ping"],"mappings":"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","file":"pubsub.js","sourcesContent":["import MessageStore from './MessageStore'\nimport reInterval from 'reinterval'\nlet WebSocket = require('./ws');\nlet EventEmitter = require(\"events\").EventEmitter;\n\nclass SubscriberManager extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.subscribers = {};\n\t}\n\n\treg(path, op, cb) {\n\t\tlet topic = path+'/'+op;\n\t\tthis.subscribers[topic] = {path:path, op:op, cb:cb};\n\t\tthis.on(topic, cb);\n\t}\n\n\tunreg(path, op, cb) {\n\t\tlet topic = path+'/'+op;\n\t\tdelete this.subscribers[topic];\n\t\tthis.removeListener(topic, cb);\n\t}\n\n\tdeliver(topic, message) {\n\t\tthis.emit(topic, message);\n\t}\n\n\tget() {\n\t\treturn Object.keys(this.subscribers).map((topic) => {\n\t\t\treturn this.subscribers[topic];\n\t\t});\n\t}\n}\n\n\n\n/*\n * state offline -> connecting -> online -> disconnecting -> offline\n *  offline -> connecting\n *  connecting -> online\n *             -> offline\n *  online     -> disconnecting\n *  online     -> offline\n *  disconnecting -> offline\n */\n\nexport default class extends EventEmitter {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options;\n\t\tthis.target = options.WebSocket;\n\t\tthis.host = options.host;\n\t\t//this.client = new WebSocketClient();\n\t\tthis.logger = options.logger;\n\t\tthis.subscriberMan = new SubscriberManager();\n\t\tthis.offlineQueue = [];\n\t\tthis.messageStore = new MessageStore();\n\t\tthis.wsOptions = options.wsOptions;\n\t\tthis.reconnectPeriod = options.reconnectPeriod || 5000;\n\t\tthis.reconnectTimer = null;\n\t\tthis.pingTimer = null;\n\t\tthis.pongArrived = true;\n\t\tthis.state = 'offline';\n\t}\n\n\tsendEvent(event, params) {\n\t\tlet result = null;\n\t\tswitch(this.getState()) {\n\t\t\tcase 'offline':\n\t\t\t\tresult = this.offline(event, params);\n\t\t\t\tbreak;\n\t\t\tcase 'connecting':\n\t\t\t\tresult = this.connecting(event, params);\n\t\t\t\tbreak;\n\t\t\tcase 'online':\n\t\t\t\tresult = this.online(event, params);\n\t\t\t\tbreak;\n\t\t\tcase 'disconnecting':\n\t\t\t\tresult = this.disconnecting(event, params);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.error('unknow state');\n\t\t}\n\t\tif(result) {\n\t\t\tthis.emit('state-changed', {\n\t\t\t\tcurrentState: this.state,\n\t\t\t\tnextState: result.nextState\n\t\t\t});\n\t\t\tthis.logger.log('state changed from ' + this.state + ' to ' + result.nextState);\n\t\t\tthis.state = result.nextState;\n\t\t}\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\toffline(event) {\n\t\tif(event == 'connect') {\n\t\t\tthis._connect();\n\t\t\treturn {\n\t\t\t\tnextState: 'connecting'\n\t\t\t}\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tconnecting(event, params) {\n\t\tif(event == 'connect') {\n\t\t\tthis.logger.warn('already connecting');\n\t\t\treturn null;\n\t\t}else if(event == 'opened') {\n\t\t\t//open\n\t\t\tthis.emit('open', {});\n\t\t\tthis.subscriberMan.get().map((s) => {\n\t\t\t\tthis._subscribe(s.path, s.op, s.cb);\n\t\t\t});\n\t\t\tthis.flushOfflineMessage();\n\t\t\tthis._setupPingTimer();\n\t\t\treturn {\n\t\t\t\tnextState: 'online'\n\t\t\t}\n\t\t}else if(event == 'error') {\n\t\t\tthis._clean();\n\t\t\tthis._setupReconnect();\n\t\t\treturn null;\n\t\t}else if(event == 'closed') {\n\t\t\tthis._clean();\n\t\t\tif(params.code > 1000) {\n\t\t\t\tthis._setupReconnect();\n\t\t\t\treturn null;\n\t\t\t}else{\n\t\t\t\treturn {\n\t\t\t\t\tnextState: 'offline'\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tonline(event, params) {\n\t\tif(event == 'connect') {\n\t\t\tthis.logger.warn('already connected');\n\t\t\treturn null;\n\t\t}else if(event == 'opened') {\n\t\t\tthis.logger.warn('already connected');\n\t\t\treturn null;\n\t\t}else if(event == 'error') {\n\t\t\tthis._clean();\n\t\t\tthis._setupReconnect();\n\t\t\treturn {\n\t\t\t\tnextState: 'connecting'\n\t\t\t}\n\t\t}else if(event == 'closed') {\n\t\t\tthis._clean();\n\t\t\tif(params.code > 1000) {\n\t\t\t\tthis._setupReconnect();\n\t\t\t\treturn {\n\t\t\t\t\tnextState: 'connecting'\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn {\n\t\t\t\t\tnextState: 'offline'\n\t\t\t\t}\n\t\t\t}\n\t\t}else if(event == 'disconnect') {\n\t\t\tthis._disconnect();\n\t\t\treturn {\n\t\t\t\tnextState: 'disconnecting'\n\t\t\t}\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tdisconnecting(event) {\n\t\tif(event == 'error' || event == 'closed') {\n\t\t\tthis._clean();\n\t\t\treturn {\n\t\t\t\tnextState: 'offline'\n\t\t\t}\n\t\t}else{\n\t\t\tthis.logger.warn('now disconnecting');\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/* API */\n\tconnect() {\n\t\tthis.sendEvent('connect', {});\n\t}\n\n\tdisconnect() {\n\t\tthis.sendEvent('disconnect', {});\n\t}\n\n\tpublish(path, op, v, cb) {\n\t\tif(typeof v !== 'string') v = JSON.stringify(v);\n\t\tthis.send({\n        \tp: path,\n        \t_t: 'p',\n        \t_o: op,\n        \tv: v\n\t\t}, cb);\n\t}\n\n\tsubscribe(path, op, cb, onComplete) {\n\t\tthis.subscriberMan.reg(path, op, cb);\n\t\tthis._subscribe(path, op, cb, onComplete);\n\t}\n\n\tunsubscribe(path, op, cb) {\n\t\tthis.subscriberMan.unreg(path, op, cb);\n\t\tthis.send({\n        \tp: path,\n        \t_t: 'u',\n        \t_o: op\n\t\t}, cb);\n\t}\n\n\t/* private API */\n\n\t_connect() {\n\t\tthis.client = new WebSocket(this.target, this.host, this.wsOptions);\n\t\tthis.client.on('error', (error) => {\n\t\t\tthis.logger.error(error);\n\t\t\tthis.sendEvent('error', {});\n\t\t});\n\n\t\tthis.client.on('close', (code) => {\n\t\t\tthis.logger.log('closed', code);\n\t\t\tthis.sendEvent('closed', {code: code});\n\t\t});\n\n\t\tthis.client.on('open', () => {\n\t\t\tthis.sendEvent('opened', {});\n\t\t});\n\n\t\tthis.client.on('message', (utf8message) => {\n\t\t\tlet message = JSON.parse(utf8message);\n\t\t\tif(message.hasOwnProperty('e')) {\n\t\t\t\tthis.response(message);\n\t\t\t}else{\n\t\t\t\tthis.deliver(message);\t\n\t\t\t}\n\t\t});\n\n\t\tthis.client.on('pong', () => {\n\t\t\tthis._handlePong();\n\t\t})\n\t}\n\n\t_disconnect() {\n\t\tthis.client.close();\n\t}\n\n\t_setupReconnect() {\n\t\tsetTimeout(() => {\n\t\t\tthis._connect();\n\t\t}, this.reconnectPeriod);\n\t}\n\n\tresponse(message) {\n\t\tthis.messageStore.recvAck(message.e, message);\n\t}\n\n\tdeliver(message) {\n\t\tthis._resetPingInterval();\n\t\tthis.subscriberMan.deliver(message.p, message);\n\t}\n\n\t_subscribe(path, op, cb, onComplete) {\n\t\tthis.send({\n        \tp: path,\n        \t_t: 's',\n        \t_o: op\n\t\t}, onComplete);\n\t}\n\n\tsend(message, cb) {\n\t\tthis.messageStore.add(message, cb);\n\t\tif(this.client && this.getState() == 'online') {\n\t\t\tthis.client.send(JSON.stringify(message));\n\t\t\tthis._resetPingInterval();\n\t\t}\n\t}\n\n\t/* connect時に呼ばれる */\n\tflushOfflineMessage() {\n\t\tlet message = this.messageStore.enq();\n\t\tif(message) {\n\t\t\tthis.client.send(JSON.stringify(message));\n\t\t\tthis.flushOfflineMessage();\n\t\t}\n\t}\n\n\n\t_clean() {\n\t\tthis.client.close();\n\t\tthis.client.clean();\n\t\tthis.client = null;\n\t\tif (this.pingTimer !== null) {\n\t\t\tthis.pingTimer.clear()\n\t\t\tthis.pingTimer = null\n\t\t}\n\t\tthis.emit('close', {});\n\t}\n\n\t_setupPingTimer() {\n\t\tif (!this.pingTimer && this.options.keepalive) {\n\t\t\tthis.pongArrived = true\n\t\t\tthis.pingTimer = reInterval(() => {\n\t\t\t\tthis._checkPing()\n\t\t\t}, this.options.keepalive * 1000)\n\t\t}\n\t}\n\n\t_resetPingInterval() {\n\t\tif (this.pingTimer && this.options.keepalive) {\n\t\t\tthis.pingTimer.reschedule(this.options.keepalive * 1000)\n\t\t}\n\t}\n\n\t_checkPing() {\n\t\tif (this.pongArrived) {\n\t\t\tthis.pongArrived = false\n\t\t\tthis.client.ping()\n\t\t} else {\n\t\t\tthis.sendEvent('error', {message: 'pong not coming'});\n\t\t}\n\t}\n\n\t_handlePong() {\n\t\tthis.pongArrived = true\n\t}\n\n}\n"]}