{"version":3,"sources":["core/pubsub.js"],"names":["EventEmitter","require","SubscriberManager","root","op","subscribers","caller","path","cb","onComplete","timestamp","on","_startSubscribe","Object","keys","map","topic","_stopSubscribe","apiUrl","_get_on_url","pathList","_getPathList","length","JSON","stringify","_get_remote","get2","c","err","res","setTimeout","minTs","Infinity","forEach","key","ts","reverse","m","t","Math","floor","v","id","emit","abort","removeAllListeners","options","host","logger","subscriberMan","push","set","send","offlineQueue","wsOptions","reconnectPeriod","reconnectTimer","pingTimer","pongArrived","state","event","params","result","getState","offline","connecting","online","disconnecting","console","error","currentState","nextState","log","warn","flushOfflineMessage","_setupPingTimer","_clean","_setupReconnect","code","_disconnect","sendEvent","_v","_options","_get_api_url","post","assign","then","catch","reg","unreg","_connect","client","close","clean","clear","keepalive","_checkPing","reschedule","message"],"mappings":"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","file":"pubsub.js","sourcesContent":["import reInterval from 'reinterval'\nlet EventEmitter = require('events').EventEmitter\n\nclass SubscriberManager extends EventEmitter {\n  constructor (root, op) {\n    super()\n    this.root = root\n    this.op = op\n    this.subscribers = {}\n    this.caller = null\n  }\n\n  reg (path, cb, onComplete) {\n    this.subscribers[path] = {cb: cb, timestamp: 0}\n    this.on(path, cb)\n    this._startSubscribe(onComplete)\n  }\n\n  _getPathList () {\n    return Object.keys(this.subscribers).map((topic) => {\n      return [topic, this.subscribers[topic].timestamp]\n    })\n  }\n\n  _startSubscribe (onComplete) {\n    this._stopSubscribe()\n    let apiUrl = this.root._get_on_url(this.op || 'push')\n    let pathList = this._getPathList()\n    if (pathList.length === 0) return\n    let path = JSON.stringify(pathList)\n    this.caller = this.root._get_remote().get2(apiUrl, {c: path}, (err, res) => {\n      if (err) {\n        if (onComplete) onComplete(err)\n        setTimeout(() => {\n          this._startSubscribe()\n        }, 5000)\n        return\n      }\n      if (res.err) {\n        if (res.err === 'permission_denied') {\n          if (onComplete) onComplete(res.err)\n        } else {\n          if (onComplete) onComplete(res.err)\n        }\n      } else {\n        let minTs = Infinity\n        Object.keys(res).forEach((key) => {\n          let ts = res[key][0][0]\n          this.subscribers[key].timestamp = ts\n          if (minTs > ts) minTs = ts\n          res[key].reverse().map((m) => {\n            if (m.length === 2) {\n              return {\n                t: Math.floor(m[0] / 1000),\n                v: m[1]\n              }\n            } else if (m.length === 3) {\n              return {\n                id: m[1],\n                t: Math.floor(m[0] / 1000),\n                v: m[2]\n              }\n            }\n          }).forEach((m) => {\n            this.emit(key, m)\n          })\n        })\n        for (var t in this.subscribers) {\n          if (this.subscribers[t].timestamp === 0) {\n            this.subscribers[t].timestamp = minTs\n          }\n        }\n        this._startSubscribe()\n      }\n    })\n  }\n\n  _stopSubscribe () {\n    if (this.caller) this.caller.abort()\n  }\n\n  unreg (path) {\n    delete this.subscribers[path]\n    this._stopSubscribe()\n    // if(cb) {\n    // this.removeListener(path, cb);\n    // }else{\n    this.removeAllListeners(path)\n    // }\n  }\n\n  get () {\n    return Object.keys(this.subscribers).map((topic) => {\n      return this.subscribers[topic]\n    })\n  }\n}\n\n/*\n * state offline -> connecting -> online -> disconnecting -> offline\n *  offline -> connecting\n *  connecting -> online\n *             -> offline\n *  online     -> disconnecting\n *  online     -> offline\n *  disconnecting -> offline\n */\n\nexport default class extends EventEmitter {\n  constructor (options, root) {\n    super()\n    this.options = options\n    this.root = root\n    this.host = options.host\n    this.logger = options.logger\n    this.subscriberMan = {}\n    this.subscriberMan.push = new SubscriberManager(root, 'push')\n    this.subscriberMan.set = new SubscriberManager(root, 'set')\n    this.subscriberMan.send = new SubscriberManager(root, 'send')\n    this.offlineQueue = []\n    this.wsOptions = options.wsOptions\n    this.reconnectPeriod = options.reconnectPeriod || 5000\n    this.reconnectTimer = null\n    this.pingTimer = null\n    this.pongArrived = true\n    this.state = 'offline'\n  }\n\n  sendEvent (event, params) {\n    let result = null\n    switch (this.getState()) {\n      case 'offline':\n        result = this.offline(event, params)\n        break\n      case 'connecting':\n        result = this.connecting(event, params)\n        break\n      case 'online':\n        result = this.online(event, params)\n        break\n      case 'disconnecting':\n        result = this.disconnecting(event, params)\n        break\n      default:\n        console.error('unknow state')\n    }\n    if (result) {\n      this.emit('state-changed', {\n        currentState: this.state,\n        nextState: result.nextState\n      })\n      this.logger.log('state changed from ' + this.state + ' to ' + result.nextState)\n      this.state = result.nextState\n    }\n  }\n\n  getState () {\n    return this.state\n  }\n\n  offline (event) {\n    if (event === 'connect') {\n      // this._connect();\n      return {\n        nextState: 'connecting'\n      }\n    } else {\n      return null\n    }\n  }\n\n  connecting (event, params) {\n    if (event === 'connect') {\n      this.logger.warn('already connecting')\n      return null\n    } else if (event === 'opened') {\n      // open\n      this.emit('open', {})\n      /*\n        this.subscriberMan.get().map((s) => {\n          this._subscribe(s.path, s.op, s.cb);\n         });\n      */\n      this.flushOfflineMessage()\n      this._setupPingTimer()\n      return {\n        nextState: 'online'\n      }\n    } else if (event === 'error') {\n      this._clean()\n      this._setupReconnect()\n      return null\n    } else if (event === 'closed') {\n      this._clean()\n      if (params.code > 1000) {\n        this._setupReconnect()\n        return null\n      } else {\n        return {\n          nextState: 'offline'\n        }\n      }\n    } else {\n      return null\n    }\n  }\n\n  online (event, params) {\n    if (event === 'connect') {\n      this.logger.warn('already connected')\n      return null\n    } else if (event === 'opened') {\n      this.logger.warn('already connected')\n      return null\n    } else if (event === 'error') {\n      this._clean()\n      this._setupReconnect()\n      return {\n        nextState: 'connecting'\n      }\n    } else if (event === 'closed') {\n      this._clean()\n      if (params.code > 1000) {\n        this._setupReconnect()\n        return {\n          nextState: 'connecting'\n        }\n      } else {\n        return {\n          nextState: 'offline'\n        }\n      }\n    } else if (event === 'disconnect') {\n      this._disconnect()\n      return {\n        nextState: 'disconnecting'\n      }\n    } else {\n      return null\n    }\n  }\n\n  disconnecting (event) {\n    if (event === 'error' || event === 'closed') {\n      this._clean()\n      return {\n        nextState: 'offline'\n      }\n    } else {\n      this.logger.warn('now disconnecting')\n      return null\n    }\n  }\n\n  /* API */\n  connect () {\n    this.sendEvent('connect', {})\n  }\n\n  disconnect () {\n    this.sendEvent('disconnect', {})\n  }\n\n  publish (path, op, _v, cb, _options) {\n    let options = _options || {}\n\n    let v = JSON.stringify(_v)\n    // let rid = this.messageStore.add({path:path,op:op,v:v,options:_options}, cb);\n    let apiUrl = this.root._get_api_url(op || 'push')\n    /*\n      let retryTimer = setTimeout(() => {\n        this.flushOfflineMessage(() => {\n        });\n      }, 10000);\n    */\n    this.root._get_remote().post(apiUrl, Object.assign({v: v}, options), {c: path}, {'Content-Type': 'application/json'}).then((res) => {\n      if (res) res.v = v\n      // this.messageStore.recvAck(rid, res);\n      // clearTimeout(retryTimer);\n      cb(null, res)\n    }).catch(function (err) {\n      cb(err)\n    })\n  }\n\n  subscribe (path, op, cb, onComplete) {\n    this.subscriberMan[op].reg(path, cb, onComplete)\n    // this._subscribe(path, op, cb, onComplete);\n  }\n\n  unsubscribe (path, op) {\n    this.subscriberMan[op].unreg(path)\n  }\n\n  /* private API */\n\n  _setupReconnect () {\n    setTimeout(() => {\n      this._connect()\n    }, this.reconnectPeriod)\n  }\n\n  _clean () {\n    this.client.close()\n    this.client.clean()\n    this.client = null\n    if (this.pingTimer !== null) {\n      this.pingTimer.clear()\n      this.pingTimer = null\n    }\n    this.emit('close', {})\n  }\n\n  _setupPingTimer () {\n    if (!this.pingTimer && this.options.keepalive) {\n      this.pongArrived = true\n      this.pingTimer = reInterval(() => {\n        this._checkPing()\n      }, this.options.keepalive * 1000)\n    }\n  }\n\n  _resetPingInterval () {\n    if (this.pingTimer && this.options.keepalive) {\n      this.pingTimer.reschedule(this.options.keepalive * 1000)\n    }\n  }\n\n  _checkPing () {\n    if (this.pongArrived) {\n      this.pongArrived = false\n      // send ping event\n    } else {\n      this.sendEvent('error', {message: 'pong not coming'})\n    }\n  }\n\n  _handlePong () {\n    this.pongArrived = true\n  }\n}\n"]}