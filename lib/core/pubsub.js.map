{"version":3,"sources":["core/pubsub.js"],"names":["EventEmitter","require","SubscriberManager","root","op","subscribers","caller","path","cb","onComplete","timestamp","on","_startSubscribe","Object","keys","map","topic","_stopSubscribe","apiUrl","_get_on_url","pathList","_get_path_list","length","JSON","stringify","_get_remote","get2","assign","c","err","res","setTimeout","forEach","key","reverse","m","t","v","id","emit","abort","removeListener","removeAllListeners","options","host","logger","subscriberMan","push","set","send","offlineQueue","messageStore","wsOptions","reconnectPeriod","reconnectTimer","pingTimer","pongArrived","state","event","params","result","getState","offline","connecting","online","disconnecting","console","error","currentState","nextState","log","warn","flushOfflineMessage","_setupPingTimer","_clean","_setupReconnect","code","_disconnect","sendEvent","_options","rid","add","_get_api_url","post","then","recvAck","catch","message","enq","mes","get","reg","unreg","_connect","client","close","clean","clear","keepalive","_checkPing","reschedule"],"mappings":"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","file":"pubsub.js","sourcesContent":["import MessageStore from './MessageStore'\nimport reInterval from 'reinterval'\nlet EventEmitter = require(\"events\").EventEmitter;\n\nclass SubscriberManager extends EventEmitter {\n\tconstructor(root, op) {\n\t\tsuper();\n\t\tthis.root = root;\n\t\tthis.op = op;\n\t\tthis.subscribers = {};\n\t\tthis.caller = null;\n\t}\n\n\treg(path, cb, onComplete) {\n\t\tthis.subscribers[path] = {cb:cb,timestamp:0};\n\t\tthis.on(path, cb);\n\t\tthis._startSubscribe(onComplete);\n\t}\n\n\t_get_path_list() {\n\t\treturn Object.keys(this.subscribers).map((topic) => {\n\t\t\treturn [topic, this.subscribers[topic].timestamp];\n\t\t})\n\t}\n\n\t_startSubscribe(onComplete) {\n\t\tthis._stopSubscribe()\n\t\tlet apiUrl = this.root._get_on_url(this.op || 'push');\n\t\tlet pathList = this._get_path_list();\n\t\tif(pathList.length == 0) return;\n\t\tlet path = JSON.stringify(pathList);\n\t\tpathList\n\t\tthis.caller = this.root._get_remote().get2(apiUrl, Object.assign({c:path}, {}), (err, res) => {\n\t\t\tif(err) {\n\t\t\t\tif(onComplete) onComplete(err);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._startSubscribe();\n\t\t\t\t}, 5000);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(res.err) {\n\t\t\t\tif(res.err == 'permission_denied') {\n\t\t\t\t\tif(onComplete) onComplete(res.err);\n\t\t\t\t}else{\n\t\t\t\t\tif(onComplete) onComplete(res.err);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tObject.keys(res).forEach((key) => {\n\t\t\t\t\tthis.subscribers[key].timestamp = res[key][0][0];\n\t\t\t\t\tres[key].reverse().map((m) => {\n\t\t\t\t\t\tif(m.length == 2) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tt: m[0],\n\t\t\t\t\t\t\t\tv: m[1]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else if(m.length == 3) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tid: m[1],\n\t\t\t\t\t\t\t\tt: m[0],\n\t\t\t\t\t\t\t\tv: m[2]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}).forEach((m) => {\n\t\t\t\t\t\tthis.emit(key, m);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\tthis._startSubscribe()\n\t\t\t}\n\n\t\t});\n\t}\n\n\t_stopSubscribe() {\n\t\tif(this.caller) this.caller.abort();\n\t}\n\n\tunreg(path, cb) {\n\t\tdelete this.subscribers[path];\n\t\tif(cb) {\n\t\t\tthis.removeListener(path, cb);\n\t\t}else{\n\t\t\tthis.removeAllListeners(path);\n\t\t}\n\t}\n\n\tget() {\n\t\treturn Object.keys(this.subscribers).map((topic) => {\n\t\t\treturn this.subscribers[topic];\n\t\t});\n\t}\n}\n\n\n\n/*\n * state offline -> connecting -> online -> disconnecting -> offline\n *  offline -> connecting\n *  connecting -> online\n *             -> offline\n *  online     -> disconnecting\n *  online     -> offline\n *  disconnecting -> offline\n */\n\nexport default class extends EventEmitter {\n\tconstructor(options, root) {\n\t\tsuper();\n\t\tthis.options = options;\n\t\tthis.root = root;\n\t\tthis.host = options.host;\n\t\tthis.logger = options.logger;\n\t\tthis.subscriberMan = {};\n\t\tthis.subscriberMan.push = new SubscriberManager(root, 'push');\n\t\tthis.subscriberMan.set = new SubscriberManager(root, 'set');\n\t\tthis.subscriberMan.send = new SubscriberManager(root, 'send');\n\t\tthis.offlineQueue = [];\n\t\tthis.messageStore = new MessageStore();\n\t\tthis.wsOptions = options.wsOptions;\n\t\tthis.reconnectPeriod = options.reconnectPeriod || 5000;\n\t\tthis.reconnectTimer = null;\n\t\tthis.pingTimer = null;\n\t\tthis.pongArrived = true;\n\t\tthis.state = 'offline';\n\t}\n\n\tsendEvent(event, params) {\n\t\tlet result = null;\n\t\tswitch(this.getState()) {\n\t\t\tcase 'offline':\n\t\t\t\tresult = this.offline(event, params);\n\t\t\t\tbreak;\n\t\t\tcase 'connecting':\n\t\t\t\tresult = this.connecting(event, params);\n\t\t\t\tbreak;\n\t\t\tcase 'online':\n\t\t\t\tresult = this.online(event, params);\n\t\t\t\tbreak;\n\t\t\tcase 'disconnecting':\n\t\t\t\tresult = this.disconnecting(event, params);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.error('unknow state');\n\t\t}\n\t\tif(result) {\n\t\t\tthis.emit('state-changed', {\n\t\t\t\tcurrentState: this.state,\n\t\t\t\tnextState: result.nextState\n\t\t\t});\n\t\t\tthis.logger.log('state changed from ' + this.state + ' to ' + result.nextState);\n\t\t\tthis.state = result.nextState;\n\t\t}\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\toffline(event) {\n\t\tif(event == 'connect') {\n\t\t\t//this._connect();\n\t\t\treturn {\n\t\t\t\tnextState: 'connecting'\n\t\t\t}\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tconnecting(event, params) {\n\t\tif(event == 'connect') {\n\t\t\tthis.logger.warn('already connecting');\n\t\t\treturn null;\n\t\t}else if(event == 'opened') {\n\t\t\t//open\n\t\t\tthis.emit('open', {});\n\t\t\t/*\n\t\t\tthis.subscriberMan.get().map((s) => {\n\t\t\t\tthis._subscribe(s.path, s.op, s.cb);\n\t\t\t});\n\t\t\t*/\n\t\t\tthis.flushOfflineMessage();\n\t\t\tthis._setupPingTimer();\n\t\t\treturn {\n\t\t\t\tnextState: 'online'\n\t\t\t}\n\t\t}else if(event == 'error') {\n\t\t\tthis._clean();\n\t\t\tthis._setupReconnect();\n\t\t\treturn null;\n\t\t}else if(event == 'closed') {\n\t\t\tthis._clean();\n\t\t\tif(params.code > 1000) {\n\t\t\t\tthis._setupReconnect();\n\t\t\t\treturn null;\n\t\t\t}else{\n\t\t\t\treturn {\n\t\t\t\t\tnextState: 'offline'\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tonline(event, params) {\n\t\tif(event == 'connect') {\n\t\t\tthis.logger.warn('already connected');\n\t\t\treturn null;\n\t\t}else if(event == 'opened') {\n\t\t\tthis.logger.warn('already connected');\n\t\t\treturn null;\n\t\t}else if(event == 'error') {\n\t\t\tthis._clean();\n\t\t\tthis._setupReconnect();\n\t\t\treturn {\n\t\t\t\tnextState: 'connecting'\n\t\t\t}\n\t\t}else if(event == 'closed') {\n\t\t\tthis._clean();\n\t\t\tif(params.code > 1000) {\n\t\t\t\tthis._setupReconnect();\n\t\t\t\treturn {\n\t\t\t\t\tnextState: 'connecting'\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn {\n\t\t\t\t\tnextState: 'offline'\n\t\t\t\t}\n\t\t\t}\n\t\t}else if(event == 'disconnect') {\n\t\t\tthis._disconnect();\n\t\t\treturn {\n\t\t\t\tnextState: 'disconnecting'\n\t\t\t}\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tdisconnecting(event) {\n\t\tif(event == 'error' || event == 'closed') {\n\t\t\tthis._clean();\n\t\t\treturn {\n\t\t\t\tnextState: 'offline'\n\t\t\t}\n\t\t}else{\n\t\t\tthis.logger.warn('now disconnecting');\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/* API */\n\tconnect() {\n\t\tthis.sendEvent('connect', {});\n\t}\n\n\tdisconnect() {\n\t\tthis.sendEvent('disconnect', {});\n\t}\n\n\tpublish(path, op, v, cb, _options) {\n\t\tlet options = _options || {};\n\n\t\tv = JSON.stringify(v);\n\t\tlet rid = this.messageStore.add({path:path,op:op,v:v,options:_options}, cb);\n\t\tlet apiUrl = this.root._get_api_url(op || 'push');\n\t\t/*\n\t\tlet retryTimer = setTimeout(() => {\n\t\t\tthis.flushOfflineMessage(() => {\n\t\t\t});\n\t\t}, 10000);\n\t\t*/\n\t\tthis.root._get_remote().post(apiUrl, Object.assign({v:v}, _options), {c:path}, {'Content-Type': 'application/json'}).then((res) => {\n\t\t\tthis.messageStore.recvAck(rid, res);\n\t\t\t//clearTimeout(retryTimer);\n\t\t\t//cb(null, res);\n\t\t}).catch(function(err) {\n\t\t\tcb(err);\n\t\t});\n\t}\n\n\t/* connect時に呼ばれる */\n\tflushOfflineMessage(cb) {\n\t\tlet message = this.messageStore.enq();\n\t\tif(message) {\n\t\t\tlet mes = message.message;\n\t\t\tlet rid = message.id;\n\t\t\tlet apiUrl = this.root._get_api_url(mes.op || 'push');\n\t\t\tthis.root._get_remote().get(apiUrl, Object.assign({c:mes.path,v:mes.v}, mes.options)).then((res) => {\n\t\t\t\tthis.messageStore.recvAck(rid, res);\n\t\t\t\tthis.flushOfflineMessage(cb);\n\t\t\t}).catch(function(err) {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t}else{\n\t\t\tcb(null);\n\t\t}\n\t}\n\n\tsubscribe(path, op, cb, onComplete) {\n\t\tthis.subscriberMan[op].reg(path, cb, onComplete);\n\t\t//this._subscribe(path, op, cb, onComplete);\n\t}\n\n\tunsubscribe(path, op, cb) {\n\t\tthis.subscriberMan[op].unreg(path, cb);\n\t}\n\n\t/* private API */\n\n\n\t_setupReconnect() {\n\t\tsetTimeout(() => {\n\t\t\tthis._connect();\n\t\t}, this.reconnectPeriod);\n\t}\n\n\t_clean() {\n\t\tthis.client.close();\n\t\tthis.client.clean();\n\t\tthis.client = null;\n\t\tif (this.pingTimer !== null) {\n\t\t\tthis.pingTimer.clear()\n\t\t\tthis.pingTimer = null\n\t\t}\n\t\tthis.emit('close', {});\n\t}\n\n\t_setupPingTimer() {\n\t\tif (!this.pingTimer && this.options.keepalive) {\n\t\t\tthis.pongArrived = true\n\t\t\tthis.pingTimer = reInterval(() => {\n\t\t\t\tthis._checkPing()\n\t\t\t}, this.options.keepalive * 1000)\n\t\t}\n\t}\n\n\t_resetPingInterval() {\n\t\tif (this.pingTimer && this.options.keepalive) {\n\t\t\tthis.pingTimer.reschedule(this.options.keepalive * 1000)\n\t\t}\n\t}\n\n\t_checkPing() {\n\t\tif (this.pongArrived) {\n\t\t\tthis.pongArrived = false\n\t\t\t//send ping event\n\t\t} else {\n\t\t\tthis.sendEvent('error', {message: 'pong not coming'});\n\t\t}\n\t}\n\n\t_handlePong() {\n\t\tthis.pongArrived = true\n\t}\n\n}\n"]}