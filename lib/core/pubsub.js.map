{"version":3,"sources":["core/pubsub.js"],"names":["WebSocket","require","EventEmitter","SubscriberManager","subscribers","path","op","cb","topic","on","removeListener","message","emit","Object","keys","map","options","target","host","connected","logger","requestId","requestMap","subscriberMan","offlineQueue","wsOptions","reconnectPeriod","client","error","clean","_setupReconnect","e","log","code","get","s","_subscribe","flushOfflineMessage","utf8message","JSON","parse","hasOwnProperty","response","deliver","warn","close","setTimeout","connect","unregisterCallback","p","v","stringify","send","registerCallback","_t","_o","onComplete","reg","unreg","push","forEach","m","rid","getRequestId"],"mappings":"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","file":"pubsub.js","sourcesContent":["let WebSocket = require('./ws');\nlet EventEmitter = require(\"events\").EventEmitter;\n\nclass SubscriberManager extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.subscribers = {};\n\t}\n\n\treg(path, op, cb) {\n\t\tlet topic = path+'/'+op;\n\t\tthis.subscribers[topic] = {path:path, op:op, cb:cb};\n\t\tthis.on(topic, cb);\n\t}\n\n\tunreg(path, op, cb) {\n\t\tlet topic = path+'/'+op;\n\t\tdelete this.subscribers[topic];\n\t\tthis.removeListener(topic, cb);\n\t}\n\n\tdeliver(topic, message) {\n\t\tthis.emit(topic, message);\n\t}\n\n\tget() {\n\t\treturn Object.keys(this.subscribers).map((topic) => {\n\t\t\treturn this.subscribers[topic];\n\t\t});\n\t}\n}\n\nexport default class {\n\tconstructor(options) {\n\t\tthis.target = options.WebSocket;\n\t\tthis.host = options.host;\n\t\t//this.client = new WebSocketClient();\n\t\tthis.connected = false;\n\t\tthis.logger = options.logger;\n\t\tthis.requestId = 0;\n\t\tthis.requestMap = {};\n\t\tthis.subscriberMan = new SubscriberManager();\n\t\tthis.offlineQueue = [];\n\t\tthis.wsOptions = options.wsOptions;\n\t\tthis.reconnectPeriod = options.reconnectPeriod || 5000;\n\t}\n\n\tconnect() {\n\t\tif(!this.connected) {\n\t\t\tthis.client = new WebSocket(this.target, this.host, this.wsOptions);\n\t\t\tthis.client.on('error', (error) => {\n\t\t\t\tthis.logger.error(error);\n\t\t\t\tthis.clean();\n\t\t\t\tthis._setupReconnect();\n\t\t\t});\n\n\t\t\tthis.client.on('close', (e) => {\n\t\t\t\tthis.logger.log('closed', e);\n\t\t\t\tthis.clean();\n\t\t\t\tif(e.code > 1000) this._setupReconnect();\n\t\t\t});\n\n\t\t\tthis.client.on('open', () => {\n\t\t\t\tthis.logger.log('connected');\n\t\t\t\tthis.connected = true;\n\t\t\t\tthis.subscriberMan.get().map((s) => {\n\t\t\t\t\tthis._subscribe(s.path, s.op, s.cb);\n\t\t\t\t});\n\t\t\t\tthis.flushOfflineMessage();\n\t\t\t});\n\n\t\t\tthis.client.on('message', (utf8message) => {\n\t\t\t\tlet message = JSON.parse(utf8message);\n\t\t\t\tif(message.hasOwnProperty('e')) {\n\t\t\t\t\tthis.response(message);\n\t\t\t\t}else{\n\t\t\t\t\tthis.deliver(message);\t\n\t\t\t\t}\n\t\t\t});\n\t\t\t//this.client.connect(this.host);\n\t\t}else{\n\t\t\tthis.logger.warn('already connected');\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif(this.connected) {\n\t\t\tthis.client.close();\n\t\t}else{\n\t\t\tthis.logger.warn('already disconnected');\n\t\t}\n\t}\n\n\t_setupReconnect() {\n\t\tsetTimeout(() => {\n\t\t\tthis.connect();\n\t\t}, this.reconnectPeriod);\n\t}\n\n\tresponse(message) {\n\t\tlet cb = this.requestMap[message.e];\n\t\tif(cb) cb(message);\n\t\tthis.unregisterCallback(message.e);\n\t}\n\n\tdeliver(message) {\n\t\tthis.subscriberMan.deliver(message.p, message);\n\t}\n\n\tpublish(path, op, v, cb) {\n\t\tif(typeof v !== 'string') v = JSON.stringify(v);\n\t\tthis.send({\n        \te: this.registerCallback(cb),\n        \tp: path,\n        \t_t: 'p',\n        \t_o: op,\n        \tv: v\n\t\t});\n\t}\n\n\tsubscribe(path, op, cb, onComplete) {\n\t\tthis.subscriberMan.reg(path, op, cb);\n\t\tthis._subscribe(path, op, cb, onComplete);\n\t}\n\n\t_subscribe(path, op, cb, onComplete) {\n\t\tthis.send({\n        \te: this.registerCallback(onComplete),\n        \tp: path,\n        \t_t: 's',\n        \t_o: op\n\t\t});\n\t}\n\n\n\tunsubscribe(path, op, cb) {\n\t\tthis.subscriberMan.unreg(path, op, cb);\n\t\tthis.send({\n        \te: this.registerCallback(cb),\n        \tp: path,\n        \t_t: 'u',\n        \t_o: op\n\t\t});\n\t}\n\n\tsend(message) {\n\t\tif(this.connected) {\n\t\t\tthis.client.send(JSON.stringify(message));\n\t\t}else{\n\t\t\tthis.offlineQueue.push(message);\n\t\t\tthis.logger.log('offline send');\n\t\t}\n\t}\n\n\tflushOfflineMessage() {\n\t\tif(this.connected) {\n\t\t\tthis.offlineQueue.forEach((m) => {\n\t\t\t\tthis.send(m);\n\t\t\t});\n\t\t\tthis.offlineQueue = [];\n\t\t}else{\n\t\t\tthis.logger.warn('connection closed');\n\t\t}\n\t}\n\n\tclose() {\n\t\tif(this.connected) {\n\t\t\tthis.client.close();\n\t\t}else{\n\t\t\tthis.logger.warn('already closed');\n\t\t}\n\t}\n\n\tclean() {\n\t\tthis.client.close();\n\t\tthis.connected = false;\n\t\tthis.client.clean();\n\t\tthis.client = null;\n\t}\n\n\tregisterCallback(cb) {\n\t\tlet rid = this.getRequestId();\n\t\tthis.requestMap[rid] = cb;\n\t\treturn rid;\n\t}\n\n\tunregisterCallback(rid) {\n\t\tdelete this.requestMap[rid];\n\t}\n\n\tgetRequestId() {\n\t\tif(this.requestId > 100000) this.requestId = 0;\n\t\treturn this.requestId++;\n\t}\n\n}\n"]}