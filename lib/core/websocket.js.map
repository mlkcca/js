{"version":3,"sources":["core/websocket.js"],"names":["WebSocket","require","options","host","connected","connection","logger","messageHandler","requestId","requestMap","subscribers","offlineQueue","init","closeHandler","errorHandler","console","log","client","on","error","clean","flushOfflineMessage","utf8message","message","JSON","parse","hasOwnProperty","response","deliver","warn","cb","e","unregisterCallback","path","op","v","stringify","send","registerCallback","p","_t","_o","push","forEach","m","close","rid","getRequestId"],"mappings":"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","file":"websocket.js","sourcesContent":["const WebSocket = require('ws');\n\n/*\nif ('browser' !== process.title) {\n\tWebSocket = require('ws');\n}else{\n\tWebSocket = window.WebSocket;\n}\n*/\n\nexport default class {\n\tconstructor(options) {\n\t\tthis.host = options.host;\n\t\t//this.client = new WebSocketClient();\n\t\tthis.connected = false;\n\t\tthis.connection = null;\n\t\tthis.logger = options.logger;\n\t\tthis.messageHandler = function() {\n\n\t\t}\n\t\tthis.requestId = 0;\n\t\tthis.requestMap = {};\n\t\tthis.subscribers = {};\n\t\tthis.offlineQueue = [];\n\t\tthis.init();\n\t}\n\n\tinit(messageHandler, closeHandler, errorHandler) {\n\n\t}\n\n\tconnect() {\n\t\tif(!this.connected) {\n\t\t\tconsole.log(this.host);\n\t\t\tthis.client = new WebSocket(this.host);\n\t\t\tthis.client.on('error', (error) => {\n\t\t\t\tthis.logger.error(error);\n\t\t\t\tthis.clean();\n\t\t\t});\n\n\t\t\tthis.client.on('close', () => {\n\t\t\t\tthis.logger.log('closed');\n\t\t\t\tthis.clean();\n\t\t\t});\n\n\t\t\tthis.client.on('open', () => {\n\t\t\t\tthis.logger.log('connected');\n\t\t\t\tthis.connected = true;\n\t\t\t\tthis.flushOfflineMessage();\n\t\t\t});\n\n\t\t\tthis.client.on('message', (utf8message) => {\n\t\t\t\tlet message = JSON.parse(utf8message);\n\t\t\t\tconsole.log(message);\n\t\t\t\tif(message.hasOwnProperty('e')) {\n\t\t\t\t\tthis.response(message);\n\t\t\t\t}else{\n\t\t\t\t\tthis.deliver(message);\t\n\t\t\t\t}\n\t\t\t});\n\t\t\t//this.client.connect(this.host);\n\t\t}else{\n\t\t\tthis.logger.warn('already connected');\n\t\t}\n\t}\n\n\tresponse(message) {\n\t\tlet cb = this.requestMap[message.e];\n\t\tif(cb) cb(message);\n\t\tthis.unregisterCallback(message.e);\n\t}\n\n\tdeliver(message) {\n\t\tconsole.log(message);\n\t\tthis.subscribers\n\t}\n\n\tpublish(path, op, v, cb) {\n\t\tif(typeof v !== 'string') v = JSON.stringify(v);\n\t\tthis.send({\n        \te: this.registerCallback(cb),\n        \tp: path,\n        \t_t: 'p',\n        \t_o: op,\n        \tv: v\n\t\t});\n\t}\n\n\tsubscribe(path, op, cb) {\n\t\tthis.send({\n        \te: this.registerCallback(cb),\n        \tp: path,\n        \t_t: 's',\n        \t_o: op\n\t\t});\n\t}\n\n\tunsubscribe(path, op, cb) {\n\t\tthis.send({\n        \te: this.registerCallback(cb),\n        \tp: path,\n        \t_t: 'u',\n        \t_o: op\n\t\t});\n\t}\n\n\tsend(message) {\n\t\tif(this.connected) {\n\t\t\tthis.client.send(JSON.stringify(message));\n\t\t}else{\n\t\t\tthis.offlineQueue.push(message);\n\t\t\tthis.logger.warn('connection closed');\n\t\t}\n\t}\n\n\tflushOfflineMessage() {\n\t\tif(this.connected) {\n\t\t\tthis.offlineQueue.forEach((m) => {\n\t\t\t\tthis.send(m);\n\t\t\t});\n\t\t\tthis.offlineQueue = [];\n\t\t}else{\n\t\t\tthis.logger.warn('connection closed');\n\t\t}\n\t}\n\n\tclose() {\n\t\tif(this.connected) {\n\t\t\tthis.client.close();\n\t\t}else{\n\t\t\tthis.logger.warn('already closed');\n\t\t}\n\t}\n\n\tclean() {\n\t\tthis.connected = false;\n\t\tthis.connection = null;\n\t}\n\n\tregisterCallback(cb) {\n\t\tlet rid = this.getRequestId();\n\t\tthis.requestMap[rid] = cb;\n\t\treturn rid;\n\t}\n\n\tunregisterCallback(rid) {\n\t\tdelete this.requestMap[rid];\n\t}\n\n\tgetRequestId() {\n\t\tif(this.requestId > 100000) this.requestId = 0;\n\t\treturn this.requestId++;\n\t}\n\n}\n"]}