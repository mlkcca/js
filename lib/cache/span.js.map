{"version":3,"sources":["cache/span.js"],"names":["ts","data","tailTs","length","t","span","getTailTs","mergeData","Math","max","min","d1","d2","d","concat","idList","dd","filter","id","sort","a","b","limit","getData","slice"],"mappings":";;;;;;;;;;;AACE,kBAAaA,EAAb,EAAiBC,IAAjB,EAAuB;AAAA;;AACrB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,KAAKD,IAAL,CAAU,KAAKA,IAAL,CAAUE,MAAV,GAAmB,CAA7B,EAAgCC,CAA9C;AACD;;;;4BAEQC,I,EAAM;AACb,UAAI,KAAKL,EAAL,IAAWK,KAAKC,SAAL,EAAX,IAA+BD,KAAKL,EAAL,IAAW,KAAKM,SAAL,EAA9C,EAAgE;AAC9D,aAAKL,IAAL,GAAY,KAAKM,SAAL,CAAe,KAAKN,IAApB,EAA0BI,KAAKJ,IAA/B,CAAZ;AACA,aAAKD,EAAL,GAAUQ,KAAKC,GAAL,CAAS,KAAKT,EAAd,EAAkBK,KAAKL,EAAvB,CAAV;AACA,aAAKE,MAAL,GAAcM,KAAKE,GAAL,CAAS,KAAKJ,SAAL,EAAT,EAA2BD,KAAKC,SAAL,EAA3B,CAAd;AACA,eAAO,IAAP;AACD,OALD,MAKO;AACL,eAAO,KAAP;AACD;AACF;;;8BAEUK,E,EAAIC,E,EAAI;AACjB,UAAIC,IAAIF,GAAGG,MAAH,CAAUF,EAAV,CAAR;AACA,UAAIG,SAAS,EAAb;AACA,UAAIC,KAAKH,EAAEI,MAAF,CAAS,UAAUJ,CAAV,EAAa;AAC7B,YAAIE,OAAOF,EAAEK,EAAT,CAAJ,EAAkB;AAChB,iBAAO,KAAP;AACD,SAFD,MAEO;AACLH,iBAAOF,EAAEK,EAAT,IAAe,IAAf;AACA,iBAAO,IAAP;AACD;AACF,OAPQ,CAAT;AAQAF,SAAGG,IAAH,CAAQ,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACtB,YAAID,EAAEhB,CAAF,GAAMiB,EAAEjB,CAAZ,EAAe,OAAO,CAAC,CAAR,CAAf,KACK,IAAIgB,EAAEhB,CAAF,GAAMiB,EAAEjB,CAAZ,EAAe,OAAO,CAAP,CAAf,KACA,OAAO,CAAP;AACN,OAJD;AAKA,aAAOY,EAAP;AACD;;;gCAEY;AACX,aAAO,KAAKd,MAAZ;AACD;;;0BAEMF,E,EAAIsB,K,EAAO;AAChB,UAAI,KAAKtB,EAAL,IAAWA,EAAf,EAAmB;AACjB,YAAIC,OAAO,KAAKsB,OAAL,CAAavB,EAAb,CAAX;AACA,YAAIC,KAAKE,MAAL,IAAemB,KAAnB,EAA0B;AACxB,iBAAOrB,KAAKuB,KAAL,CAAW,CAAX,EAAcF,KAAd,CAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;;4BAEQtB,E,EAAI;AACX,aAAO,KAAKC,IAAL,CAAUgB,MAAV,CAAiB,UAACJ,CAAD,EAAO;AAC7B,eAAOA,EAAET,CAAF,IAAOJ,EAAd;AACD,OAFM,CAAP;AAGD","file":"span.js","sourcesContent":["export default class {\n  constructor (ts, data) {\n    this.ts = ts\n    this.data = data\n    this.tailTs = this.data[this.data.length - 1].t\n  }\n\n  combine (span) {\n    if (this.ts >= span.getTailTs() && span.ts >= this.getTailTs()) {\n      this.data = this.mergeData(this.data, span.data)\n      this.ts = Math.max(this.ts, span.ts)\n      this.tailTs = Math.min(this.getTailTs(), span.getTailTs())\n      return true\n    } else {\n      return false\n    }\n  }\n\n  mergeData (d1, d2) {\n    let d = d1.concat(d2)\n    let idList = {}\n    var dd = d.filter(function (d) {\n      if (idList[d.id]) {\n        return false\n      } else {\n        idList[d.id] = true\n        return true\n      }\n    })\n    dd.sort(function (a, b) {\n      if (a.t > b.t) return -1\n      else if (a.t < b.t) return 1\n      else return 0\n    })\n    return dd\n  }\n\n  getTailTs () {\n    return this.tailTs\n  }\n\n  query (ts, limit) {\n    if (this.ts >= ts) {\n      let data = this.getData(ts)\n      if (data.length >= limit) {\n        return data.slice(0, limit)\n      }\n    }\n    return null\n  }\n\n  getData (ts) {\n    return this.data.filter((d) => {\n      return d.t <= ts\n    })\n  }\n}\n"]}